name: "CI/Build/CD Pipeline"

on:
  push:
    paths-ignore:
      - ".gitignore"
      - ".env.*.example"
      - ".pre-commit-config.yaml"
      - "README.md"
  pull_request:
    paths-ignore:
      - ".gitignore"
      - ".env.*.example"
      - ".pre-commit-config.yaml"
      - "README.md"

env:
  BASE_NAME_DOCKER: ${{ vars.BASE_NAME_DOCKER }}
  BASE_DIR: ${{ vars.BASE_DIR || vars.BASE_NAME_DOCKER }}
  DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  LOKI_URL: ${{ vars.LOKI_URL || 'http://loki:3100/loki/api/v1/push' }}
  DB_NAME: ${{ vars.DB_NAME }}
  DB_PORT: ${{ vars.DB_PORT || '5432' }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  REDIS_PORT: ${{ vars.REDIS_PORT || '6379' }}
  SERVER_SSH: ${{ secrets.SERVER_SSH }}
  SERVER_USER: ${{ secrets.SERVER_USER }}
  SERVER_HOST: ${{ secrets.SERVER_HOST }}

jobs:
  ci:
    name: "Continuous Integration"
    strategy:
      matrix:
        python-version: ["3.12"]
        poetry-version: ["1.8.2"]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Setup a local virtual environment (if no poetry.toml file)
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - name: Cache virtual environment
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install the project dependencies
        run: poetry install

      - name: Linting
        run: poetry run ruff check

      - name: Check types with mypy
        run: poetry run mypy src --install-types --non-interactive

  build-test:
    needs: ci
    name: "Build test image"
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}
      - name: Extract name and version from Makefile
        run: |
          echo "PROJECT_NAME=$(grep -oP '^PROJECT_NAME := \K.*' Makefile)" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(grep -oP '^PROJECT_VERSION := \K.*' Makefile)" >> $GITHUB_ENV
      - name: Build and push test
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}:${{ env.PROJECT_VERSION }}-test,${{ env.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}:test

  build-prod:
    needs: ci
    name: "Build production image"
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_PASSWORD }}
      - name: Extract name and version from Makefile
        run: |
          echo "PROJECT_NAME=$(grep -oP '^PROJECT_NAME := \K.*' Makefile)" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(grep -oP '^PROJECT_VERSION := \K.*' Makefile)" >> $GITHUB_ENV
      - name: Build and push production
        uses: docker/build-push-action@v3
        with:
          platforms: linux/amd64,linux/arm64,linux/arm64/v8
          no-cache: true
          push: true
          tags: ${{ env.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}:${{ env.PROJECT_VERSION }},${{ env.DOCKERHUB_USERNAME }}/${{ env.PROJECT_NAME }}:latest

  cd:
    needs: build-prod
    name: "Continuous Deployment"
    runs-on: ubuntu-22.04
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - name: Setup .env.prod file
        run: |
          cat << EOF > .env.prod
          ENVIRONMENT=production
          LOKI_URL=${{ env.LOKI_URL }}
          DB_HOST=${{ env.BASE_NAME_DOCKER }}-db
          DB_PORT=${{ env.DB_PORT }}
          DB_NAME=${{ env.DB_NAME }}
          DB_USER=${{ env.DB_USER }}
          DB_PASSWORD=${{ env.DB_PASSWORD }}
          POSTGRES_DB=${{ env.DB_NAME }}
          POSTGRES_USER=${{ env.DB_USER }}
          POSTGRES_PASSWORD=${{ env.DB_PASSWORD}}
          REDIS_HOST=${{ env.BASE_NAME_DOCKER }}-cache
          REDIS_PORT=${{ env.REDIS_PORT }}
          EOF
      - name: Extract name and version from Makefile
        run: |
          echo "PROJECT_NAME=$(grep -oP '^PROJECT_NAME := \K.*' Makefile)" >> $GITHUB_ENV
      - name: Setup SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ env.SERVER_SSH }}
      - name: Check project folder
        run: ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p /${{ env.BASE_DIR }}/${{ env.PROJECT_NAME }}"
      - name: Copy configs files
        run: scp ./.env.prod ./Makefile ./docker-compose.yaml ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:/${{ env.BASE_DIR }}/${{ env.PROJECT_NAME }}
      - name: Restart docker-compose
        run: ssh -o StrictHostKeyChecking=no ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "cd /${{ env.BASE_DIR }}/${{ env.PROJECT_NAME }} && make dc-start-prod"
